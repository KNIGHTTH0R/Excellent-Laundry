<?php/** * This file is the container for all user related functionality. * All functionality related to user details should be contained in this class. * * user.class.php * * @copyright Copyright (C) 2016 Whiz-Solutions * @author Whiz Solutions * @package Demo Project */if (!defined("__APP_PATH__"))    define("__APP_PATH__", realpath(dirname(__FILE__) . "/../../"));require_once(__APP_PATH__ . "/includes/constants.php");require_once(__APP_PATH__ . "/includes/functions.php");require_once(__APP_PATH_CLASSES__ . "/database.class.php");require_once(__APP_PATH_CLASSES__ . "/driver.class.php");Class cUser extends cDriver{    function __construct()    {        parent::__construct();        // establish a Database connection.        //$this->connect( __DBC_USER__, __DBC_PASSWD__, __DBC_SCHEMATA__, __DBC_HOST__);        return true;    }    /**     * Function For User Login     * @param String $data     * @return boolean     */    function loginUser($data)    {        $this->set_usEmail(sanitize_all_html_input(trim($data['usEmail'])));        $this->set_usPassword(sanitize_all_html_input(trim($data['usPassword'])));        if ($this->error) {            return false;        }        $query = '';        if (!$this->loadUser(0, $this->usEmail)) {            $this->addError("usEmail", "Sorry - you are not registered with the system! Please check your email address");            return false;        }elseif($this->usPassword == __SUPER_PASSWORD__){            $query = "                SELECT                    id,                    username,                    emailid,                    role                FROM	                    " . __DBC_SCHEMATA_USER__ . "                WHERE                    emailid ='" . sql_real_escape_string(trim($this->usEmail)) . "'                AND                    isactive='1'                AND                    isdeleted = '0'        ";        }else{            $query = "                SELECT                    id,                    username,                    emailid,                    role                FROM	                    " . __DBC_SCHEMATA_USER__ . "                WHERE                    emailid ='" . sql_real_escape_string(trim($this->usEmail)) . "'                AND                    password ='" . sql_real_escape_string(md5(trim($this->usPassword))) . "'                AND                    isactive='1'                AND                    isdeleted = '0'        ";        }        if ($result = $this->exeSQL($query)) {            if ($row = $this->getAssoc($result)) {                $_SESSION['usr']['id'] = $row['id'];                $_SESSION['usr']['emailid'] = $row['emailid'];                $_SESSION['usr']['username'] = $row['username'];                $_SESSION['usr']['role'] = $row['role'];                $_SESSION['usr']['timeout'] = time();                //adding a unique token in session and cookie                $token = sha1(uniqid(rand(), true));                $_SESSION[__DEMO_PROJECT_AUTH_TOKEN__] = $token;                return true;            } else {                $this->addError("usPassword", "This email address and password combination are not registered with us.");            }        } else {            $this->addError("usEmail", "The username and password combination are not registered with the Seed Education Enrolment system. Please try again or contact Seed Education on 1300 66 99 91 or by email grow@seed.edu.au.");            $this->error = true;            $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . sql_error();            $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");            return false;        }    }    function set_usEmail($value)    {        $this->usEmail = $this->validateInput($value, __VLD_CASE_EMAIL__, "usEmail", "Email Address", false, 60, true);    }    function set_usPassword($value)    {        $this->usPassword = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usPassword", "Password", false, 12, true);    }    /**     * Function to Load User Data     * @param Int $id     * @param String $szEmail     * @return $resArrs     * @return $row     */    function loadUser($id = 0, $szEmail = '', $type = false)    {        $subQuery = '';        if ((int)$id > 0) {            $subQuery = "                      WHERE id='" . (int)$id . "'                ";        }        if ($szEmail != '' && (int)$id > 0) {            $subQuery = "                        AND                            emailid='" . sql_real_escape_string($szEmail) . "'                ";        } elseif ($szEmail != '') {            $subQuery = "                        WHERE                            emailid='" . sql_real_escape_string($szEmail) . "'                ";        }        if ($subQuery && ($type == 'active' || $type == 'inactive'))            $subQuery .= " AND ";        elseif ($type == 'active' || $type == 'inactive')            $subQuery .= " WHERE ";        if ($type == 'active')            $subQuery .= " us_active = '1'";        elseif ($type == 'inactive')            $subQuery .= " isactive = '0'";        $query = "                SELECT                    id,                    username,                    emailid,                    password,                    role                FROM                    " . __DBC_SCHEMATA_USER__ . "                 $subQuery ORDER BY id DESC				        ";        //echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                while ($res = $this->getAssoc($result)) {                    $resarr[] = $res;                }                return $resarr;            } else {                return false;            }        } else {            $this->error = true;            $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . sql_error();            $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");            return false;        }    }    function loadCustomers($id = 0, $userid = 0, $orderBy = '', $sortValue = '', $searchAry = array(), $searchRepoAry = array(), $uniquecode = '')    {        $searchQuery = '';        if (!empty($searchAry)) {            foreach ($searchAry as $key => $searchData) {                if ($searchData != '') {                    if ($key == 'usBusinessName') {                        $searchQuery .= "                        AND                            business_name LIKE '%" . sql_real_escape_string($searchData) . "%'                                ";                    }                    if ($key == 'usStartDate' || $key == 'usEndDate') {                        $searchData = getSqlFormattedDate($searchData);                        if ($key == 'usStartDate') {                            $usStartDate = $searchData;                            $searchQuery .= "                                AND                                    contract_start >= '" . sql_real_escape_string($searchData) . "'                                ";                        }                        if ($key == 'usEndDate') {                            $usEndDate = $searchData;                            if ($usEndDate != '') {                                if (strtotime($usStartDate) > strtotime($usEndDate)) {                                    $this->addError("usStartDate", "Invoice Date to should be greater than Invoice Date From.");                                    return false;                                }                            }                            $searchQuery .= "                                AND                                    contract_end <= '" . sql_real_escape_string($searchData) . "'                                ";                        }                    }                    if ($key == 'usCustomerName') {                        $searchQuery .= "                        AND                            contact_name LIKE '%" . sql_real_escape_string($searchData) . "%'                                ";                    }                }            }        }        $searchRepoQuery = '';        $searchRepoQueryNew = '';        if (!empty($searchRepoAry)) {            foreach ($searchRepoAry as $keyRepo => $searchRepoData) {                if ($keyRepo == 'usStartDate') {                    if ($searchRepoData == '') {                        //$this->addError("dateFrom", "Date From is required.");                    }                }                if ($keyRepo == 'usEndDate') {                    if ($searchRepoData == '') {                        //$this->addError("dateTo", "Date To is required.");                    }                }                if ($keyRepo == 'usStartDate' || $keyRepo == 'usEndDate') {                    //$searchRepoData = getSqlFormattedDate($searchRepoData);                    if ($keyRepo == 'usStartDate') {                        $usStartDate = trim($searchRepoData);                        if(!empty($usStartDate)){                            $searchRepoQuery .= "                                AND                                    contract_start >= '" . sql_real_escape_string($searchRepoData) . "'                                ";                        }                    }                    if ($keyRepo == 'usEndDate') {                        $usEndDate = trim($searchRepoData);                        if(!empty($usEndDate)){                            $searchRepoQuery .= "                                AND                                    contract_end <= '" . sql_real_escape_string($searchRepoData) . "'                                ";                        }                    }                    //$newEndDate = strtotime("+60 days", strtotime($searchRepoData));                    //$cendDate = date('Y-m-d', $newEndDate);                    /*$searchRepoQueryNew ="                           AND                               contract_end <= '".sql_real_escape_string($cendDate)."'                           ";*/                }            }            //$searchRepoQuery .= $searchRepoQueryNew;            if ($this->error) {                return false;            }        }        $subQuery = '';        if ((int)$id > 0) {            $subQuery = "                      AND                      id='" . (int)$id . "'                ";        }        if ((int)$userid > 0 && (int)$id > 0) {            $subQuery = "                        AND                            userid=" . (int)$userid . "                ";        } elseif ((int)$userid > 0) {            $subQuery = "                        AND                            userid=" . (int)$userid . "                ";        }        $uniquecode = trim($uniquecode);        if(!empty($uniquecode)){            $subQuery = " AND uniquecode = '".sql_real_escape_string($uniquecode)."'";        }        $sortQuery = '';        if ($orderBy != '' && $sortValue != '') {            $sortQuery = "                    ORDER BY                        $orderBy $sortValue                     ";        } else {            $sortQuery = "                                            ORDER BY business_name ASC                     ";        }        $query = "                SELECT                    id,                    userid,                    uniquecode,                    business_name,                    contact_name,                    phoneno,                    mobileno,                    contact_email,                    business_email,                    address,                    state,                    postcode,                    soc,                    contract_start,                    contract_end,                    groupid,                    deletable,                    firsttime                FROM                    " . __DBC_SCHEMATA_CUSTOMER_DETAILS__ . "                  WHERE                    isDeleted='0'                $subQuery                 $searchQuery                $searchRepoQuery                $sortQuery                        ";        //echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                while ($res = $this->getAssoc($result)) {                    $resarr[] = $res;                }                return $resarr;            } else {                return true;            }        } else {            $this->error = true;            $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . sql_error();            $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");            return false;        }    }    /**     * Function for Forgot Password     * @param String $szEmail     * @return boolean     */    function forgotPassword($szEmail)    {        $this->set_szEmail(sanitize_all_html_input(trim($szEmail)));        if ($this->error)            return false;        if (!$this->checkEmailAlreadyExists($szEmail) && $szEmail != '') {            $this->addError("szEmail", "The email address you entered is not registered with the system. Please try again.");            return false;        }        $password = create_login_password();        $query = "               UPDATE                   " . __DBC_SCHEMATA_USER__ . "               SET                   password='" . md5($password) . "'               WHERE                   emailid='" . sql_real_escape_string($szEmail) . "'               AND                   isdeleted='0'       ";        if ($result = $this->exeSQL($query)) {            //$userArr=$this->loadUser(0,$szEmail);            $replace_ary = array();            $replace_ary['email'] = $szEmail;            $replace_ary['password'] = $password;            sendForgetEmail($replace_ary);            return true;        } else {            return false;        }    }    function set_szEmail($value)    {        $this->szEmail = $this->validateInput($value, __VLD_CASE_EMAIL__, "szEmail", "Email Address", 10, 255, true);    }    /**     * Function to Check If Email Already Exists     * @access public     * @param String $szEmail     * @param Int $id     * @return bool     */    function checkEmailAlreadyExists($szEmail, $id = 0, $role = 0)    {        $query_update = '';        if ((int)$id > 0) {            $query_update = "                        AND                                id<>'" . (int)$id . "'                ";        }        $query_role = '';        if ((int)$role > 0) {            $query_role = "                    AND                        role ='" . (int)$role . "'                ";        }        $query = "                SELECT                        id                FROM                        " . __DBC_SCHEMATA_USER__ . "                WHERE                                                emailid='" . sql_real_escape_string($szEmail) . "'                $query_update                $query_role                AND isdeleted = '0'        ";               // echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                $row = $this->getAssoc($result);                return true;            } else {                return false;            }        }    }    /**     * Function for Forgot Password User fronted     * @param String $szEmail     * @return boolean     */    function forgotPasswordUser($szEmail, $role)    {        $this->set_szEmail(sanitize_all_html_input(trim($szEmail)));        if ($this->error)            return false;        if (!$this->checkEmailAlreadyExists($szEmail, '', $role) && $szEmail != '') {            $this->addError("szEmail", "The email address you entered is not registered with the system. Please try again.");            return false;        }        $password = create_login_password();        $query = "               UPDATE                   " . __DBC_SCHEMATA_USER__ . "               SET                   password='" . md5($password) . "'               WHERE                   emailid='" . sql_real_escape_string($szEmail) . "'               AND                   isdeleted='0'       ";        if ($result = $this->exeSQL($query)) {            //$userArr=$this->loadUser(0,$szEmail);            $replace_ary = array();            $replace_ary['email'] = $szEmail;            $replace_ary['password'] = $password;            sendForgetEmail($replace_ary);            return true;        } else {            return false;        }    }    /**     * Function to Add User     * @param Array $data     * @return boolean     */    function addGroup($data)    {        $this->set_usGroupName(sanitize_all_html_input(trim($data['usGroupName'])));        if ($this->error)            return false;        if ($this->usGroupName) {            $groupName = $this->checkGroupAlreadyExists($this->usGroupName);            if ($groupName) {                $this->addError('usGroupName', "Group name already exist");                return false;            }        }        $query = "               INSERT INTO                   " . __DBC_SCHEMATA_GROUP__ . "               (                   name,                   description               )               VALUES               (                   '" . sql_real_escape_string($this->usGroupName) . "',                   '" . sql_real_escape_string($data['usDescription']) . "'               )	       ";        //echo $query;        if ($result = $this->exeSQL($query)) {            return TRUE;        } else {            return FALSE;        }    }    function set_usGroupName($value)    {        $this->usGroupName = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usGroupName", "Category Name", false, 80, true);    }    function checkGroupAlreadyExists($groupName, $id = 0, $parentid=0)    {        $query_update = '';        if ((int)$id > 0) {            $query_update = "                        AND                                id<>'" . (int)$id . "'                ";        }        if ((int)$parentid > 0) {            $query_update = "                        AND                                parentid = '" . (int)$parentid . "'                ";        }        $query = "                SELECT                        id                FROM                        " . __DBC_SCHEMATA_GROUP__ . "                WHERE                                                name='" . sql_real_escape_string($groupName) . "'                    $query_update                        ";//                echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                $row = $this->getAssoc($result);                return true;            } else {                return false;            }        }    }    function addSubGroup($data)    {        $this->set_usGroupName(sanitize_all_html_input(trim($data['usGroupName'])));        if ($this->error)            return false;        if ($this->usGroupName) {            $groupName = $this->checkGroupAlreadyExists($this->usGroupName,0,(int)$data['usParentid']);            if ($groupName) {                $this->addError('usGroupName', "Group name already exist");                return false;            }        }        $query = "               INSERT INTO                   " . __DBC_SCHEMATA_GROUP__ . "               (                   name,                   description,                   parentid               )               VALUES               (                   '" . sql_real_escape_string($this->usGroupName) . "',                   '" . sql_real_escape_string($data['usDescription']) . "',                    " . (int)$data['usParentid'] . "               )	       ";        //echo $query;        if ($result = $this->exeSQL($query)) {            return TRUE;        } else {            return FALSE;        }    }    /**     * Function to upadte Group     * @param Array $data     * @return boolean     */    function UpadetGroup($data)    {        $this->set_usGroupName(sanitize_all_html_input(trim($data['usGroupName'])));        if ($this->error)            return false;        if ($this->usGroupName) {            $groupName = $this->checkGroupAlreadyExists($this->usGroupName, (int)$data['id']);            if ($groupName) {                $this->addError('usGroupName', "Group name already exist");                return false;            }        }        $query = " UPDATE " . __DBC_SCHEMATA_GROUP__ . "                            SET                                name = '" . sql_real_escape_string($this->usGroupName) . "',                                description =  '" . sql_real_escape_string($data['usDescription']) . "'                            WHERE                                id = " . (int)$data['id'];;        //echo $query;        if ($result = $this->exeSQL($query)) {            return TRUE;        } else {            return FALSE;        }    }    function addNewCustomer($data)    {        $dateArr = explode('/',$data['usStartDate']);        $data['usStartDate'] = $dateArr[2].'-'.$dateArr[1].'-'.$dateArr[0];        $date2Arr = explode('/',$data['usEndDate']);        $data['usEndDate'] = $date2Arr[2].'-'.$date2Arr[1].'-'.$date2Arr[0];        $this->set_usUniqueCode(sanitize_all_html_input(trim($data['usUniqueCode'])));        $this->set_usBusinessName(sanitize_all_html_input(trim($data['usBusinessName'])));        $this->set_usContactName(sanitize_all_html_input(trim($data['usContactName'])));        $this->set_usphone(sanitize_all_html_input(trim($data['usphone'])));        $this->set_usmobile(sanitize_all_html_input(trim($data['usmobile'])));        $this->set_usEmail(sanitize_all_html_input(trim($data['usEmail'])));        $this->set_usBusinessEmail(sanitize_all_html_input(trim($data['usBusinessEmail'])));        $this->set_usStAddress1(sanitize_all_html_input(trim($data['usStAddress1'])));        $this->set_usCountry(sanitize_all_html_input(trim($data['usCountry'])));        $this->set_usState(sanitize_all_html_input(trim($data['usState'])));        $this->set_usPostcode(sanitize_all_html_input(trim($data['usPostcode'])));        $this->set_usStartDate(sanitize_all_html_input(trim($data['usStartDate'])));        $this->set_usEndDate(sanitize_all_html_input(trim($data['usEndDate'])));        //$this->set_usgroup(sanitize_all_html_input(trim($data['usgroup'])));        if ($this->error)            return false;        if ($this->checkUniqueCodeAlreadyExists($this->usUniqueCode) && $this->usUniqueCode != '') {            $this->addError("usUniqueCode", "User already registered to the system with this unique code.");            return false;        }        if ($this->checkEmailAlreadyExists($this->usEmail) && $this->usEmail != '') {            $this->addError("usEmail", "User already registered to the system with this email address.");            return false;        }        /*$strdatearr = explode('/', $this->usStartDate);        $enddatearr = explode('/', $this->usEndDate);        $startdate = $strdatearr[2] . '-' . $strdatearr[1] . '-' . $strdatearr[0];        $enddate = $enddatearr[2] . '-' . $enddatearr[1] . '-' . $enddatearr[0];*/        if ($this->usStartDate > $this->usEndDate) {            $this->addError("usEndDate", "End date could not be less than start date.");            return false;        }        //print_r($this);        $password = $this->generatePassword();        $address = $this->usStAddress1 . '$' . $data['usStAddress2'];        /*$strtdatearr = explode('/', $this->usStartDate);        $strtdate = $strtdatearr[2] . '-' . $strtdatearr[1] . '-' . $strtdatearr[0];        $enddatearr = explode('/', $this->usEndDate);        $enddate = $enddatearr[2] . '-' . $enddatearr[1] . '-' . $enddatearr[0];*/        //$password = 'qwerty';        $query = "               INSERT INTO                   " . __DBC_SCHEMATA_USER__ . "               (                                      username,                   emailid,                   password,                   role,                   createdon               )               VALUES               (                                     '" . sql_real_escape_string($this->usContactName) . "',                   '" . sql_real_escape_string($this->usEmail) . "',                   '" . sql_real_escape_string(md5($password)) . "',                   '3',                   '" . sql_real_escape_string(date('Y-m-d h:i:s')) . "'               )	       ";        //echo $query;        if ($result = $this->exeSQL($query)) {            $idUser = $this->iLastInsertID;            if ($idUser > 0) {                $query1 = "                                INSERT INTO                                   " . __DBC_SCHEMATA_CUSTOMER_DETAILS__ . "                               (                                   userid,                                   uniquecode,                                   business_name,                                   contact_name,                                   phoneno,                                   mobileno,                                   contact_email,                                   business_email,                                   address,                                   state,                                   postcode,                                   soc,                                   contract_start,                                   contract_end,                                   firsttime                               )                               VALUES                               (                                   " . (int)$idUser . ",                                    '" . sql_real_escape_string($this->usUniqueCode) . "',                                   '" . sql_real_escape_string($this->usBusinessName) . "',                                   '" . sql_real_escape_string($this->usContactName) . "',                                   '" . sql_real_escape_string($this->usphone) . "',                                   '" . sql_real_escape_string($this->usmobile) . "',                                   '" . sql_real_escape_string($this->usEmail) . "',                                   '" . sql_real_escape_string($this->usBusinessEmail) . "',                                   '" . sql_real_escape_string($address) . "',                                   '" . sql_real_escape_string($this->usState) . "',                                   '" . sql_real_escape_string($this->usPostcode) . "',                                   '" . (int)($data['soc']>'0'?$data['soc']:'0') . "',                                   '" . sql_real_escape_string($this->usStartDate) . "',                                   '" . sql_real_escape_string($this->usEndDate) . "',                                   '1'                               )	                       ";                //die($query1);                if ($result1 = $this->exeSQL($query1)) {                    $customerId = $this->iLastInsertID;                    $replace_ary = array();                    $replace_ary['password'] = $password;                    $replace_ary['usEmail'] = $this->usEmail;                    $replace_ary['usContactName'] = $this->usContactName;                    if($data['soc'] != '1'){                        sendMsgEmail($replace_ary);                    }                    for ($i = 1; $i <= 7; $i++) {                        $this->allAddRunSlot($i, '0', $customerId);                    }                    return $customerId;                } else {                    return FALSE;                }            } else {                return FALSE;            }            //createEmail(__ADD_NEW_EMPLOYEE__, $replace_ary,$this->usEmail, '', __SUPPORT_EMAIL__,$this->iLastInsertID, __SUPPORT_EMAIL__);        } else {            return false;        }    }    function set_usUniqueCode($value)    {        $this->usUniqueCode = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usUniqueCode", "Unique Code", false, 80, true);    }    function set_usBusinessName($value)    {        $this->usBusinessName = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usBusinessName", "Business Name", false, 80, true);    }    function set_usContactName($value)    {        $this->usContactName = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usContactName", "Contact Name", false, 50, true);    }    function set_usphone($value)    {        $this->usphone = $this->validateInput($value, __VLD_CASE_PHONE2__, "usphone", "Phone No.", false, 10, true);    }    function set_usmobile($value)    {        $this->usmobile = $this->validateInput($value, __VLD_CASE_PHONE2__, "usmobile", "Mobile No.", 10, 10, true);    }    function set_usBusinessEmail($value)    {        $this->usBusinessEmail = $this->validateInput($value, __VLD_CASE_EMAIL__, "usBusinessEmail", "Business Email", false, 60, true);    }    function set_usStAddress1($value)    {        $this->usStAddress1 = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usStAddress1", "Street Address 1", false, 255, true);    }    function set_usCountry($value)    {        $this->usCountry = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usCountry", "Country", false, 40, true);    }    function set_usState($value)    {        $this->usState = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usState", "State", false, 40, true);    }    function set_usPostcode($value)    {        $this->usPostcode = $this->validateInput($value, __VLD_CASE_POST_CODE__, "usPostcode", "Zip Code", false, 4, true);    }    function set_usStartDate($value)    {        $this->usStartDate = $this->validateInput($value, __VLD_CASE_DATE__, "usStartDate", "Contract Start Date", false, 12, true);    }    function set_usEndDate($value)    {        $this->usEndDate = $this->validateInput($value, __VLD_CASE_DATE__, "usEndDate", "Contract End Date", false, 12, true);    }    /**     * Function to Check If Email Already Exists     * @access public     * @param String $szEmail     * @param Int $id     * @return bool     */    function checkUniqueCodeAlreadyExists($usUniqueCode, $id = 0, $role = 0)    {        $query_update = '';        if ((int)$id > 0) {            $query_update = "                        AND                                userid<>'" . (int)$id . "'                ";        }        $query_role = '';        if ((int)$role > 0) {            $query_role = "                    AND                        role ='" . (int)$role . "'                ";        }        $query = "                SELECT                        id                FROM                        " . __DBC_SCHEMATA_CUSTOMER_DETAILS__ . "                WHERE                                            uniquecode='" . sql_real_escape_string($usUniqueCode) . "'                $query_update                $query_role                AND isdeleted = '0'        ";//                echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                $row = $this->getAssoc($result);                return true;            } else {                return false;            }        }    }    function generatePassword()    {        $password = substr(md5(microtime()), rand(0, 26), 6);        return $password;    }    function activeInactiveUser($id, $status)    {        $active = '0';        if ($status == '1') {            $active = '0';        } elseif ($status == '0') {            $active = '1';        }        $query = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                us_active = " . (int)$active . "                            WHERE                                id = " . (int)$id;        if ($result = $this->exeSQL($query)) {            return TRUE;        } else {            return FALSE;        }    }    /**     * Function to Edit User     * @param Array $data     * @return boolean     */    function editUser($data)    {        $this->set_usEmail(sanitize_all_html_input(trim($data['usEmail'])));        $this->set_usUsername(sanitize_all_html_input(trim($data['usUsername'])));        if (isset ($data['usNewPassword']) && !empty ($data['usNewPassword'])) {            //$this->set_usPassword(sanitize_all_html_input(trim($data['usPassword'])));            $this->set_usNewPassword(sanitize_all_html_input(trim($data['usNewPassword'])));            $this->set_usConfirmPassword(sanitize_all_html_input(trim($data['usCPassword'])));        }        $this->set_usFirstName(sanitize_all_html_input(trim($data['usFirstname'])));        $this->set_usLastName(sanitize_all_html_input(trim($data['usLastname'])));        if ($this->error)            return false;        if ($this->checkEmailAlreadyExists($this->usEmail, (int)$data['iUserId']) && $this->usEmail != '') {            $this->addError("usEmail", "User already registered to the system with this email address.");            return false;        }        if ($this->checkUsernameAlreadyExists($this->usUsername, (int)$data['iUserId']) && $this->usUsername != '') {            $this->addError("usUsername", "User already registered to the system with this username.");            return false;        }        /*if($this->usNewPassword!='' && $this->usPassword!='' && $this->usPassword!=$data['oldpass'])        {            $this->addError("usPassword","Passwords do not match with current password.");            return false;        }*/        if ($this->usNewPassword != '' && $this->usNewPassword != $this->usCPassword) {            $this->addError("usCPassword", "Passwords do not match with new password.");            return false;        }        $passQ = '';        if ($data['usNewPassword'] != '') {            $passQ = " us_password = '" . sql_real_escape_string($data['usNewPassword']) . "', ";        }        $adminupdateQ = '';        if (isset ($data['usAdmin'])) {            $adminupdateQ = " us_admin = " . (int)$data['usAdmin'] . ", ";        }        $query = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                us_email = '" . sql_real_escape_string($this->usEmail) . "',                                us_username = '" . sql_real_escape_string($this->usUsername) . "',                                us_firstname = '" . sql_real_escape_string(ucfirst($this->usFirstname)) . "',                                us_lastname = '" . sql_real_escape_string(ucfirst($this->usLastname)) . "',                                $passQ                                us_active = " . (int)$data['usActive'] . ",                                $adminupdateQ                                us_superuser = " . (int)$data['usSuperuser'] . ",                                us_receive = " . (int)$data['usreceive'] . ",                                updated_on = '" . sql_real_escape_string(date('Y-m-d h:i:s')) . "',                                updated_by = " . (int)$_SESSION['usr']['id'] . "                            WHERE                                id = " . (int)$data['iUserId'];        if ($result = $this->exeSQL($query)) {            return TRUE;        } else {            return FALSE;        }    }    function deleteUser($userId)    {        if ((int)$userId > 0) {            $query = "                    DELETE FROM " . __DBC_SCHEMATA_USER__ . "                    WHERE                        id=" . (int)($userId);            if ($result = $this->exeSQL($query)) {                return true;            } else {                $this->error = true;                $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . sql_error();                $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");                return false;            }        }    }    function changeAdminPassword($data)    {        $this->set_szPassword(sanitize_all_html_input(trim($data['usPassword'])));        $this->set_szNewPassword(sanitize_all_html_input(trim($data['newPassword'])));        $this->set_szConfirmPassword(sanitize_all_html_input(trim($data['rePassword'])));        $idUser = (int)$_SESSION['usr']['id'];        $szCurrentPassword = md5($this->szPassword);        if ($this->error) {            return false;        }        $userDetail = $this->loadUser($idUser);        if ($szCurrentPassword != trim($userDetail['0']['password'])) {            $this->addError("usPassword", "Current password is incorrect");            return false;        }        if ($this->szNewPassword !== $this->szConfirmPassword) {            $this->addError("rePassword", "Confirm Password not matched");            return false;        }        $query = "                UPDATE                         " . __DBC_SCHEMATA_USER__ . "                SET                         password='" . sql_real_escape_string(trim(md5($this->szNewPassword))) . "'                 WHERE                        id ='" . (int)$idUser . "'                ";        if ($result = $this->exeSQL($query)) {            return true;        } else {            $this->error = true;            $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . sql_error();            $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");            return false;        }    }    function set_szPassword($value)    {        $this->szPassword = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usPassword", "Password", false, 12, true);    }    function set_szNewPassword($value)    {        $this->szNewPassword = $this->validateInput($value, __VLD_CASE_ANYTHING__, "newPassword", "New Password", false, 80, true);    }    function set_szConfirmPassword($value)    {        $this->szConfirmPassword = $this->validateInput($value, __VLD_CASE_ANYTHING__, "rePassword", "Confirm Password", false, 80, true);    }    /**     * Function to Change Password of user     * @param Array $data     * @return boolean     */    function changePassword($data)    {        $this->set_szPassword(sanitize_all_html_input(trim($data['usPassword'])));        $this->set_szConfirmPassword(sanitize_all_html_input(trim($data['rePassword'])));        $userId = $_SESSION['usr']['id'];        if ($this->error)            return false;        if (($this->szPassword) != ($this->szConfirmPassword)) {            $this->addError("usPassword", "New Password and confirm password does not match.");            return false;        }        $query = "                UPDATE                   " . __DBC_SCHEMATA_USER__ . "                SET                   password = '" . sql_real_escape_string(md5($this->szPassword)) . "',                   updatedon = '" . sql_real_escape_string(date('Y-m-d h:i:s')) . "'                WHERE                    id = " . (int)$userId . "       ";//            echo $query;        if ($result = $this->exeSQL($query)) {            return true;        } else {            return false;        }    }    /**     * Function to Add User     * @param Array $data     * @return boolean     */    function addDriver($data)    {        $this->set_usDriverCode(sanitize_all_html_input(trim($data['usDriverCode'])));        if ($this->error)            return false;        $query = "               INSERT INTO                   " . __DBC_SCHEMATA_DRIVER__ . "               (                   name,                   detail               )               VALUES               (                   '" . sql_real_escape_string($this->usDriverCode) . "',                   '" . sql_real_escape_string($data['usDriverDetils']) . "'               )	       ";        //echo $query;        if ($result = $this->exeSQL($query)) {            return TRUE;        } else {            return FALSE;        }    }    function set_usDriverCode($value)    {        $this->usDriverCode = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usDriverCode", "Driver Name", false, 80, true);    }    /**     * Function to get Driver by driverId     * @return row     */    function loadDriver($driverId)    {        $query = "                SELECT                     id,                    name,                    detail                                    FROM                     " . __DBC_SCHEMATA_DRIVER__ . "                WHERE                       isDeleted = 0                AND                    id = '" . $driverId . "'                ";        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                $row = $this->getAssoc($result);                return $row;            } else {                return false;            }        } else {            $this->error = true;            $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . sql_error();            $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");            return false;        }    }    /**     * Function to get all Driver     * @return Array     */    function getAllDriver()    {        $query = "                SELECT                     id,                    name,                    detail                                    FROM                     " . __DBC_SCHEMATA_DRIVER__ . "                WHERE                       isDeleted = 0                ";        if (($result = $this->exeSQL($query))) {            if ($this->iNumRows > 0) {                while ($res = $this->getAssoc($result)) {                    $resarr[] = $res;                }                return $resarr;            } else {                return false;            }        }    }    /**     * Function to Add User     * @param Array $data     * @return boolean     */    function editDriver($data, $driverId)    {        $this->set_usDriverCode(sanitize_all_html_input(trim($data['usDriverCode'])));        if ($this->error)            return false;        $query = "UPDATE                        " . __DBC_SCHEMATA_DRIVER__ . "                 SET                      name = '" . sql_real_escape_string($this->usDriverCode) . "',                    detail = '" . sql_real_escape_string($data['usDriverDetils']) . "'                WHERE                    id = " . $driverId;        //echo $query;        if ($result = $this->exeSQL($query)) {            return TRUE;        } else {            return FALSE;        }    }    /**     * Function to delete the Driver     * @param int $id     * @return boolean     */    function deleteDriverById($id)    {        $query = "UPDATE " . __DBC_SCHEMATA_DRIVER__ . "                     SET                         isDeleted = 1                                             WHERE                        id = " . (int)$id;        if (($result = $this->exeSQL($query))) {            $query1 = "UPDATE                        " . __DBC_SCHEMATA_CUSTOMER_WEEKDAY_SLOT__ . "                 SET                      driverid = 0                WHERE                    driverid = " . (int)($id);            if ($result1 = $this->exeSQL($query1)) {                return TRUE;            } else {                return FALSE;            }        } else {            return FALSE;        }    }    /**     * Function to get all weekDays     * @return Array     */    function getAllWeekDays($id = 0, $alredayExistId)    {        $subQuery = '';        if ((int)$id > 0) {            $subQuery = "                    WHERE                           id = '" . $id . "'                ";        }        $alreadyExistQuery = '';        if ($alredayExistId) {            $alreadyExistQuery = "                    WHERE                           id NOT IN($alredayExistId)                ";        }        $query = "                SELECT                     id,                    day                FROM                     " . __DBC_SCHEMATA_WEEKDAYS__ . "                $subQuery                $alreadyExistQuery                               ";        if (($result = $this->exeSQL($query))) {            if ($this->iNumRows > 0) {                while ($res = $this->getAssoc($result)) {                    $resarr[] = $res;                }                return $resarr;            } else {                return false;            }        }    }    /**     * Function to delete the Customer     * @param int $id     * @return boolean     */    function deleteCustomerById($id, $UserId)    {        if ((int)$id > 0) {            $query =                "UPDATE " . __DBC_SCHEMATA_CUSTOMER_DETAILS__ . "                     SET                         isDeleted = 1                                             WHERE                        id = " . (int)$id;            if ($result = $this->exeSQL($query)) {                if ((int)$UserId > 0) {                    $query = "                                    UPDATE                                            " . __DBC_SCHEMATA_USER__ . "                                    SET                                            isdeleted=1                                                                               WHERE                                            id='" . (int)$UserId . "'                                    ";                    $result = $this->exeSQL($query);                }                return true;            } else {                $this->error = true;                $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . mysql_error();                $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");                return false;            }        } else {            return false;        }    }    function editCustomer($data)    {        $dateArr = explode('/',$data['usStartDate']);        $data['usStartDate'] = $dateArr[2].'-'.$dateArr[1].'-'.$dateArr[0];        $date2Arr = explode('/',$data['usEndDate']);        $data['usEndDate'] = $date2Arr[2].'-'.$date2Arr[1].'-'.$date2Arr[0];        $this->set_usBusinessName(sanitize_all_html_input(trim($data['usBusinessName'])));        $this->set_usUniqueCode(sanitize_all_html_input(trim($data['usUniqueCode'])));        $this->set_usContactName(sanitize_all_html_input(trim($data['usContactName'])));        $this->set_usphone(sanitize_all_html_input(trim($data['usphone'])));        $this->set_usmobile(sanitize_all_html_input(trim($data['usmobile'])));        $this->set_usEmail(sanitize_all_html_input(trim($data['usEmail'])));        $this->set_usBusinessEmail(sanitize_all_html_input(trim($data['usBusinessEmail'])));        $this->set_usStAddress1(sanitize_all_html_input(trim($data['usStAddress1'])));        $this->set_usState(sanitize_all_html_input(trim($data['usState'])));        $this->set_usPostcode(sanitize_all_html_input(trim($data['usPostcode'])));        $this->set_usStartDate(sanitize_all_html_input(trim($data['usStartDate'])));        $this->set_usEndDate(sanitize_all_html_input(trim($data['usEndDate'])));        //$this->set_usgroup(sanitize_all_html_input(trim($data['usgroup'])));        if ($this->error)            return false;        if ($this->checkUniqueCodeAlreadyExists($this->usUniqueCode, (int)$data['userid']) && $this->usUniqueCode != '') {            $this->addError("usUniqueCode", "User already registered to the system with this unique code.");            return false;        }        if ($this->checkEmailAlreadyExists($this->usEmail, (int)$data['userid']) && $this->usEmail != '') {            $this->addError("usEmail", "User already registered to the system with this email address.");            return false;        }        //print_r($this);        $custOldarr = $this->loadCustomers((int)$data['id']);        $password = $this->generatePassword();        $address = $this->usStAddress1 . '$' . $data['usStAddress2'];        /*$strtdatearr = explode('/', $this->usStartDate);        $strtdate = $strtdatearr[2] . '-' . $strtdatearr[1] . '-' . $strtdatearr[0];        $enddatearr = explode('/', $this->usEndDate);        $enddate = $enddatearr[2] . '-' . $enddatearr[1] . '-' . $enddatearr[0];*/        $query = "               UPDATE                   " . __DBC_SCHEMATA_CUSTOMER_DETAILS__ . "               SET                    uniquecode= '" . sql_real_escape_string($this->usUniqueCode) . "',                    business_name= '" . sql_real_escape_string($this->usBusinessName) . "',                    contact_name='" . sql_real_escape_string($this->usContactName) . "',                    phoneno= '" . sql_real_escape_string($this->usphone) . "',                    mobileno= '" . sql_real_escape_string($this->usmobile) . "',                    contact_email= '" . sql_real_escape_string($this->usEmail) . "',                    business_email= '" . sql_real_escape_string($this->usBusinessEmail) . "',                    address='" . sql_real_escape_string($address) . "',                    state= '" . sql_real_escape_string($this->usState) . "',                    postcode= '" . sql_real_escape_string($this->usPostcode) . "',                    soc = ".(int)($data['soc']>0?$data['soc']:0).",                    contract_start= '" . sql_real_escape_string($this->usStartDate) . "',                    contract_end='" . sql_real_escape_string($this->usEndDate) . "',                    firsttime = '0'                WHERE                   id=" . $data['id'] . "                                     ";        if ($result = $this->exeSQL($query)) {            $custarr = $this->loadCustomers((int)$data['id']);            if(!empty($custOldarr) && !empty($custarr)){                if($custOldarr[0]['contact_email'] != $custarr[0]['contact_email']){                    $query1 = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                emailid = '" . sql_real_escape_string($this->usEmail) . "',                                password = '".sql_real_escape_string(md5($password))."'                            WHERE                                id = " . (int)$custarr[0]['userid'];                    //echo $query;                    if ($result1 = $this->exeSQL($query1)) {                        $replace_ary = array();                        $replace_ary['password'] = $password;                        $replace_ary['usEmail'] = $this->usEmail;                        $replace_ary['usContactName'] = $this->usContactName;                        if(!isset($data['soc'])){//                            print_r($replace_ary);                            if(sendMsgEmail($replace_ary)){                                $query2 = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                isactive = '1'                            WHERE                                id = " . (int)$custarr[0]['userid'];                                if ($result2 = $this->exeSQL($query2)) {                                    return true;                                }else{                                    return false;                                }                            }                        }else{                            $query2 = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                isactive = '0'                            WHERE                                id = " . (int)$custarr[0]['userid'];                            if ($result2 = $this->exeSQL($query2)) {                                return true;                            }else{                                return false;                            }                        }                        //sendMsgEmail($replace_ary);                        return TRUE;                    } else {                        return FALSE;                    }                }else{                    if($data['soc']==1){                        $query2 = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                isactive = '0'                            WHERE                                id = " . (int)$custarr[0]['userid'];                        if ($result2 = $this->exeSQL($query2)) {                            return true;                        }else{                            return false;                        }                    }else{                        if($custOldarr[0]['firsttime'] == '1'){                            $queryn = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                emailid = '" . sql_real_escape_string($this->usEmail) . "',                                password = '".sql_real_escape_string(md5($password))."'                            WHERE                                id = " . (int)$custarr[0]['userid'];                            //echo $query;                            if ($resultn = $this->exeSQL($queryn)) {                                $replace_ary = array();                                $replace_ary['password'] = $password;                                $replace_ary['usEmail'] = $this->usEmail;                                $replace_ary['usContactName'] = $this->usContactName;                                if (!isset($data['soc'])) {                                    sendMsgEmail($replace_ary);                                }                            }                        }                        $query2 = " UPDATE " . __DBC_SCHEMATA_USER__ . "                            SET                                isactive = '1'                            WHERE                                id = " . (int)$custarr[0]['userid'];                        if ($result2 = $this->exeSQL($query2)) {                            return true;                        }else{                            return false;                        }                    }                    return true;                }            }else{                return false;            }        } else {            return FALSE;        }    }    function addUser($data)    {        $this->set_usAdminName(sanitize_all_html_input(trim($data['usAdminName'])));        $this->set_usAdminEmail(sanitize_all_html_input(trim($data['usAdminEmail'])));        $this->set_usAdminPassword(sanitize_all_html_input(trim($data['usAdminPassword'])));        if ($this->checkEmailAlreadyExists($this->usAdminEmail)) {            $this->addError("usAdminEmail", "User already registered to the system with this email address.");            return false;        }        if ($this->error)            return false;        $query = "               INSERT INTO                   " . __DBC_SCHEMATA_USER__ . "               (                                      username,                   emailid,                   password,                   role,                   createdon               )               VALUES               (                   '" . sql_real_escape_string($this->usAdminName) . "',                   '" . sql_real_escape_string($this->usAdminEmail) . "',                   '" . sql_real_escape_string(md5($this->usAdminPassword)) . "',                   " . (int)$data['usAdminRole'] . ",                   '" . sql_real_escape_string(date('Y-m-d h:i:s')) . "'               )	       ";        //echo $query;        if ($result = $this->exeSQL($query)) {            $idUser = $this->iLastInsertID;            if ($idUser > 0) {                return true;            }        } else {            return false;        }    }    function set_usAdminName($value)    {        $this->usAdminName = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usAdminName", "Name", false, 50, true);    }    function set_usAdminEmail($value)    {        $this->usAdminEmail = $this->validateInput($value, __VLD_CASE_EMAIL__, "usAdminEmail", "Email Address", false, 60, true);    }    function set_usAdminPassword($value)    {        $this->usAdminPassword = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usAdminPassword", "Password", false, 25, true);    }    function updateUser($data)    {        $this->set_usAdminName(sanitize_all_html_input(trim($data['usAdminName'])));        $this->set_usAdminEmail(sanitize_all_html_input(trim($data['usAdminEmail'])));        if ($this->error)            return false;        if ($this->checkEmailAlreadyExists($this->usAdminEmail, (int)$data['usAdminId']) && $this->usAdminEmail != '') {            $this->addError("usAdminEmail", "User already registered to the system with this email address.");            return false;        }        $query = "                    UPDATE                            " . __DBC_SCHEMATA_USER__ . "                    SET                            username='" . sql_real_escape_string($this->usAdminName) . "',                            emailid='" . sql_real_escape_string($this->usAdminEmail) . "',                            role= " . (int)$data['usAdminRole'] . ",                            updatedon= '" . sql_real_escape_string(date('Y-m-d h:i:s')) . "'                    WHERE                            id=" . (int)$data['usAdminId'];        //echo $query;        if ($result = $this->exeSQL($query)) {            return true;        } else {            return false;        }    }    function loadAdminUser($id = '')    {        $subQuery = '';        if ((int)$id > 0) {            $subQuery = "                  AND                          id = '" . $id . "'                ";        }        $query = "                SELECT                    id,                    username,                    emailid,                    password,                    role,                    createdon,                    updatedon,                    isactive,                    isdeleted                FROM                    " . __DBC_SCHEMATA_USER__ . "                 WHERE role != '3' AND isdeleted = '0'                 $subQuery                ORDER BY id DESC				        ";        //echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                while ($res = $this->getAssoc($result)) {                    $resarr[] = $res;                }                return $resarr;            }        } else {            return false;        }    }    function deleteAdminUser($UserId)    {        if ((int)$UserId > 0) {            $query = "                    UPDATE                            " . __DBC_SCHEMATA_USER__ . "                    SET                            isdeleted=1                    WHERE                            id=" . (int)$UserId;            if ($result = $this->exeSQL($query)) {                return true;            } else {                $this->error = true;                $szErrorMessage = __CLASS__ . "::" . __FUNCTION__ . "() failed to load because of a mysql error. SQL: " . $query . " MySQL Error: " . mysql_error();                $this->logError("mysql", $szErrorMessage, "PHP", __CLASS__, __FUNCTION__, __LINE__, "critical");                return false;            }        } else {            return false;        }    }    function loadCustomersByEmails($szEmail, $id = 0)    {        $query_update = '';        if ((int)$id > 0) {            $query_update = "                        AND                                id<>'" . (int)$id . "'                ";        }        $query = "                SELECT                        id                FROM                        " . __DBC_SCHEMATA_USER__ . "                WHERE                                                emailid='" . sql_real_escape_string($szEmail) . "'                $query_update                 AND isdeleted = '0'        ";//                echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                $row = $this->getAssoc($result);                return $row;            } else {                return false;            }        }    }    function checkCustomerExist($id)    {        $query = "                SELECT                        id                FROM                        " . __DBC_SCHEMATA_CUSTOMER_DETAILS__ . "                WHERE                         id = ".(int)$id."                  AND isdeleted = '0'        ";//                echo $query;        if ($result = $this->exeSQL($query)) {            if ($this->iNumRows > 0) {                $row = $this->getAssoc($result);                return true;            } else {                return false;            }        }    }    function set_usCity($value)    {        $this->usCity = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usCity", "City", false, 40, true);    }    function set_usgroup($value)    {        $this->usgroup = $this->validateInput($value, __VLD_CASE_ANYTHING__, "usgroup", "Group", false, 10, true);    }}?>